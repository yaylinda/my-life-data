aggregated_game = aggregate(data$price,by=list(data$game),FUN=sum)
colnames(aggregated_game) = c("game", "price")
top_spending_games = aggregated_game[which(aggregated_game$price>50),1]
data$games[!top_spending_games] = "Other"
#######################################
# stacked bar chart: money spent per game per month
#######################################
quarterly_aggregated_game = aggregate(data$price,by=list(date=data$yearQ, game=data$game),FUN=sum)
quarterly_aggregated_game = quarterly_aggregated_game[order(quarterly_aggregated_game$date),]
matrix_quarterly_aggregated_game = reshape(quarterly_aggregated_game, timevar='date', idvar='game', direction='wide')
matrix_quarterly_aggregated_game[is.na(matrix_quarterly_aggregated_game)]=0
colnames(matrix_quarterly_aggregated_game) = gsub("x.", "", colnames(matrix_quarterly_aggregated_game))
rownames(matrix_quarterly_aggregated_game) = matrix_quarterly_aggregated_game$game
matrix_quarterly_aggregated_game$game = NULL
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)",
ylim=c(0,500))
View(data)
View(aggregated_game)
data$games[!top_spending_games] = "Other"
data$games[-which(top_spending_games)] = "Other"
data$games %in% top_spending_games = "Other"
top_spending_games
data$games
data$game %in% top_spending_games = "Other"
data$game
data$game[data$game %in% top_spending_games] = "Other"
View(data)
data = read.csv("purchases.csv")
data$game = as.character(data$game)
data$date = as.Date(data$date, "%m/%d/%y")
data$yearmon = format(data$date, "%Y-%m")
data = data[order(data$date),]
data$year = year(data$date)
data$month = month(data$date)
data$quarter[data$month==1] = "Q1"
data$quarter[data$month==2] = "Q1"
data$quarter[data$month==3] = "Q1"
data$quarter[data$month==4] = "Q2"
data$quarter[data$month==5] = "Q2"
data$quarter[data$month==6] = "Q2"
data$quarter[data$month==7] = "Q3"
data$quarter[data$month==8] = "Q3"
data$quarter[data$month==9] = "Q3"
data$quarter[data$month==10] = "Q4"
data$quarter[data$month==11] = "Q4"
data$quarter[data$month==12] = "Q4"
data$yearQ = paste(data$year,data$quarter,sep="-")
#######################################
# get top spending games
#######################################
aggregated_game = aggregate(data$price,by=list(data$game),FUN=sum)
colnames(aggregated_game) = c("game", "price")
top_spending_games = aggregated_game[which(aggregated_game$price>50),1]
data$game[-(data$game %in% top_spending_games)] = "Other"
View(data)
data$game %in% top_spending_games
data = read.csv("purchases.csv")
data$game = as.character(data$game)
data$date = as.Date(data$date, "%m/%d/%y")
data$yearmon = format(data$date, "%Y-%m")
data = data[order(data$date),]
data$year = year(data$date)
data$month = month(data$date)
data$quarter[data$month==1] = "Q1"
data$quarter[data$month==2] = "Q1"
data$quarter[data$month==3] = "Q1"
data$quarter[data$month==4] = "Q2"
data$quarter[data$month==5] = "Q2"
data$quarter[data$month==6] = "Q2"
data$quarter[data$month==7] = "Q3"
data$quarter[data$month==8] = "Q3"
data$quarter[data$month==9] = "Q3"
data$quarter[data$month==10] = "Q4"
data$quarter[data$month==11] = "Q4"
data$quarter[data$month==12] = "Q4"
data$yearQ = paste(data$year,data$quarter,sep="-")
#######################################
# get top spending games
#######################################
aggregated_game = aggregate(data$price,by=list(data$game),FUN=sum)
colnames(aggregated_game) = c("game", "price")
top_spending_games = aggregated_game[which(aggregated_game$price>50),1]
data$game %in% top_spending_games
!(data$game %in% top_spending_games)
data$game[!(data$game %in% top_spending_games)] = "Other"
quarterly_aggregated_game = aggregate(data$price,by=list(date=data$yearQ, game=data$game),FUN=sum)
quarterly_aggregated_game = quarterly_aggregated_game[order(quarterly_aggregated_game$date),]
matrix_quarterly_aggregated_game = reshape(quarterly_aggregated_game, timevar='date', idvar='game', direction='wide')
matrix_quarterly_aggregated_game[is.na(matrix_quarterly_aggregated_game)]=0
colnames(matrix_quarterly_aggregated_game) = gsub("x.", "", colnames(matrix_quarterly_aggregated_game))
rownames(matrix_quarterly_aggregated_game) = matrix_quarterly_aggregated_game$game
matrix_quarterly_aggregated_game$game = NULL
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)",
ylim=c(0,500))
View(matrix_quarterly_aggregated_game)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)",
ylim=c(0,500), col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,500),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,500),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(
x=1,
y=500),
bty = "n"
)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,500),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(
x=10,
y=500),
bty = "n"
)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,500),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(
x=5,
y=500),
bty = "n"
)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,500),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(
x=6,
y=500),
bty = "n"
)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,500),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(
x=6,
y=450),
bty = "n"
)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(
x=6,
y=450),
bty = "n"
)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'magenta'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=6,y=400),bty="n")
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'pink'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=6,y=400),bty="n")
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=6,y=400),bty="n")
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=6,y=400))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=5,y=400))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=5,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=4,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x="topright",bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x="topleft",bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Date", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=4.5,y=400,bty="n"))
?melt
??melt
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot()
library('ggplot2')
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot()
ggplot(data = data, aes(x=game, y=price)) + geom_boxplot()
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=4.5,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=c("Clash of Clans", "Hearthstone", "Clash Royale", "Pokemon Go", "Gordon Ramsay Dash", "Happy Street", "Other"),
args.legend=list(x=4.5,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=c("Clash of Clans", "Hearthstone", "Clash Royale", "Pokemon Go", "Gordon Ramsay Dash", "Happy Street", "Other"),
args.legend=list(x=5,y=400,bty="n"))
source('~/Desktop/Linda\'s Projects/AppStoreGames/code.R', echo=TRUE)
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=c("Clash of Clans", "Hearthstone", "Clash Royale", "Pokemon Go", "Gordon Ramsay Dash", "Happy Street", "Other"),
args.legend=list(x=6,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('orange', 'purple', 'blue', 'yellow', 'green','red', 'gray'),
legend=c("Clash of Clans", "Hearthstone", "Clash Royale", "Pokemon Go", "Gordon Ramsay Dash", "Happy Street", "Other"),
args.legend=list(x=6,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=4.5,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=4,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=5,y=400,bty="n"))
barplot(as.matrix(matrix_quarterly_aggregated_game),
main="Mobile Game Spending", xlab="Quarter", ylab="Amount Spent ($)", ylim=c(0,450),
col=c('gray', 'orange', 'purple', 'blue', 'green', 'yellow', 'red'),
legend=rownames(matrix_quarterly_aggregated_game), args.legend=list(x=3,y=400,bty="n"))
View(matrix_quarterly_aggregated_game)
ggplot(matrix_quarterly_aggregated_game, aes(x = Quarter, y = value, fill=game)) +
geom_bar(stat='identity')
library('lattice')
library('ggplot2')
library('reshape2')
View(matrix_quarterly_aggregated_game)
melted = melt(matrix_quarterly_aggregated_game, id.var="Quarter")
ggplot(matrix_quarterly_aggregated_game, aes(x = Quarter, y = value, fill=game)) +
geom_bar(stat='identity')
View(quarterly_aggregated_game)
ggplot(quarterly_aggregated_game, aes(x = date, y = x, fill=game)) +
geom_bar(stat='identity')
ggplot(quarterly_aggregated_game, aes(x=date, y=x, fill=game)) +
geom_bar(stat='identity') + xlab("Quarter") + ylab("Amount Spent ($)") + ggtitle("Quarterly Mobile Game Spending")
library(jsonlite)
library(wordcloud)
library(tm)
library(SnowballC)
setwd("~/Desktop/MyProject/GoogleData/Searches")
json_files = list.files(pattern="*.json", full.names=T, recursive=FALSE)
original_data_obj = NULL
for (i in 1:15) {
temp_data = fromJSON(json_files[i])
temp_data_obj = temp_data$event$query
temp_data_obj$timestamp = lapply(temp_data_obj$id, function(row) {
as.numeric(round(as.numeric(row$timestamp_usec)/1000000))
})
temp_data_obj$id = NULL
original_data_obj = rbind(original_data_obj, temp_data_obj)
}
original_data_obj$time_counts = lapply(original_data_obj$timestamp, function(row) {
length((row))
})
data_obj = original_data_obj
data_obj = original_data_obj[-which(original_data_obj$time_counts > 1),]
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
#######################################
# word cloud of search terms
#######################################
data_obj_wordcloud = data_obj[which(regexpr('(Current Location)', data_obj$query_text) == -1),]
data_obj_wordcloud = data_obj_wordcloud[which(regexpr(' -> ', data_obj_wordcloud$query_text) == -1),]
queryCorpusUnique = Corpus(VectorSource(unique(data_obj_wordcloud$query_text)))
queryCorpusUnique = tm_map(queryCorpusUnique, PlainTextDocument)
queryCorpusUnique = tm_map(queryCorpusUnique, removePunctuation)
queryCorpusUnique = tm_map(queryCorpusUnique, removeWords, stopwords('english'))
wordcloud(queryCorpusUnique, max.words = 100, random.order = FALSE)
library(jsonlite)
library(wordcloud)
library(tm)
library(SnowballC)
setwd("~/Desktop/MyProject/GoogleData/Searches")
setwd("~/Desktop/Linda's Projects/GoogleData/Searches")
json_files = list.files(pattern="*.json", full.names=T, recursive=FALSE)
original_data_obj = NULL
for (i in 1:15) {
temp_data = fromJSON(json_files[i])
temp_data_obj = temp_data$event$query
temp_data_obj$timestamp = lapply(temp_data_obj$id, function(row) {
as.numeric(round(as.numeric(row$timestamp_usec)/1000000))
})
temp_data_obj$id = NULL
original_data_obj = rbind(original_data_obj, temp_data_obj)
}
original_data_obj$time_counts = lapply(original_data_obj$timestamp, function(row) {
length((row))
})
data_obj = original_data_obj
data_obj = original_data_obj[-which(original_data_obj$time_counts > 1),]
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
#######################################
# word cloud of search terms
#######################################
data_obj_wordcloud = data_obj[which(regexpr('(Current Location)', data_obj$query_text) == -1),]
data_obj_wordcloud = data_obj_wordcloud[which(regexpr(' -> ', data_obj_wordcloud$query_text) == -1),]
queryCorpusUnique = Corpus(VectorSource(unique(data_obj_wordcloud$query_text)))
queryCorpusUnique = tm_map(queryCorpusUnique, PlainTextDocument)
queryCorpusUnique = tm_map(queryCorpusUnique, removePunctuation)
queryCorpusUnique = tm_map(queryCorpusUnique, removeWords, stopwords('english'))
wordcloud(queryCorpusUnique, max.words = 100, random.order = FALSE)
#######################################
# average daily searches grouped by month
#######################################
#######################################
# average dow searches grouped by month
#######################################
setwd("~/Developer/data-visualization-projects/GoogleData/Searches")
library(jsonlite)
install.packages("jsonlite")
install.packages("wordcloud")
install.packages("tm")
install.packages("SnowballC")
library(jsonlite)
library(wordcloud)
library(tm)
library(SnowballC)
json_files = list.files(pattern="data/*.json", full.names=T, recursive=FALSE)
json_files = list.files(pattern="data/*.json", full.names=T, recursive=FALSE)
json_files = list.files(pattern="*.json", full.names=T, recursive=TRUE)
length(json_files)
for (i in 1:length(json_files)) {
temp_data = fromJSON(json_files[i])
temp_data_obj = temp_data$event$query
temp_data_obj$timestamp = lapply(temp_data_obj$id, function(row) {
as.numeric(round(as.numeric(row$timestamp_usec)/1000000))
})
temp_data_obj$id = NULL
original_data_obj = rbind(original_data_obj, temp_data_obj)
}
original_data_obj = NULL
for (i in 1:length(json_files)) {
temp_data = fromJSON(json_files[i])
temp_data_obj = temp_data$event$query
temp_data_obj$timestamp = lapply(temp_data_obj$id, function(row) {
as.numeric(round(as.numeric(row$timestamp_usec)/1000000))
})
temp_data_obj$id = NULL
original_data_obj = rbind(original_data_obj, temp_data_obj)
}
original_data_obj$time_counts = lapply(original_data_obj$timestamp, function(row) {
length((row))
})
data_obj = original_data_obj
data_obj = original_data_obj[-which(original_data_obj$time_counts > 1),]
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
data_obj = original_data_obj
data_obj = original_data_obj[-which(original_data_obj$time_counts > 1),]
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
View(data_obj)
View(original_data_obj)
View(finalized_data_obj)
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
View(original_data_obj)
View(finalized_data_obj)
data_obj$date
year(data_obj$date)
substring(data_obj$date, 1,4)
data_obj$yearmon = paste(substring(data_obj$date,1,4), sprintf("%02d", month(data_obj$date)), sep="-")
substring(data_obj$date,6,7)
substring(data_obj$date[1],6,7)
data_obj$date[1]
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
data_obj$time_counts = unlist(data_obj$time_counts)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(substring(data_obj$date,1,4), substring(data_obj$date,6,7), sep="-")
data_obj$dow = weekdays(data_obj$date)
finalized_data_obj = data_obj
data_obj_dups = original_data_obj[which(original_data_obj$time_counts > 1),]
View(data_obj_dups)
toAdd = data.frame()
for(i in 1:dim(data_obj_dups)[1]) {
row = data_obj_dups[i,]
times = row$timestamp[[1]]
for (j in 1:length(times)) {
toAdd = rbind(toAdd, data.frame("query_text"=row$query_text, "timestamp"=times[j], "time_counts"=1))
}
}
data_obj = original_data_obj
data_obj = rbind(data_obj, toAdd)
data_obj$timestamp = unlist(data_obj$timestamp)
aggregate(finalized_data_obj, by = list(finalized_data_obj$yearmon, finalized_data_obj$time_counts), FUN = "sum")
aggregate(finalized_data_obj, by = list(finalized_data_obj$yearmon, finalized_data_obj$time_counts), FUN = sum)
aggregate(finalized_data_obj, by = list(yearmon, time_counts), FUN = sum)
aggregate(x=finalized_data_obj, by = list(yearmon, time_counts), FUN = sum)
aggregate(finalized_data_obj$yearmon, by = list(finalized_data_obj$time_counts), FUN = sum)
sum(finalized_data_obj$time_counts)
install.packages("tidyverse")
ddply(finalized_data_obj, summarise, x = sum(finalized_data_obj$time_counts))
library(tidyverse)
library(plyr)
ddply(finalized_data_obj, summarise, x = sum(finalized_data_obj$time_counts))
ddply(finalized_data_obj, "my", summarise, x = sum(finalized_data_obj$time_counts))
ddply(finalized_data_obj, "sum", summarise, x = sum(finalized_data_obj$time_counts))
sum_num_searches_by_yearmon = aggregate(finalized_data_obj[c("time_counts")], by=list(yearmon=finalized_data_obj$yearmon), FUN=sum)
View(sum_num_searches_by_yearmon)
View(sum_num_searches_by_yearmon)
sum_num_searches_by_yearmon[which(sum_num_searches_by_yearmon$yearmon=="2013=07"),] = NULL
sum_num_searches_by_yearmon
sum_num_searches_by_yearmon[which(sum_num_searches_by_yearmon$yearmon=="2013=07"),] = NULL
View(sum_num_searches_by_yearmon)
which(sum_num_searches_by_yearmon$yearmon=="2013=07")
sum_num_searches_by_yearmon$yearmon
sum_num_searches_by_yearmon$yearmon == "2013-07"
which(sum_num_searches_by_yearmon$yearmon == "2013-07")
sum_num_searches_by_yearmon[which(sum_num_searches_by_yearmon$yearmon == "2013-07")]
sum_num_searches_by_yearmon[,which(sum_num_searches_by_yearmon$yearmon == "2013-07")]
sum_num_searches_by_yearmon[which(sum_num_searches_by_yearmon$yearmon == "2013-07"),]
sum_num_searches_by_yearmon[which(sum_num_searches_by_yearmon$yearmon == "2013-07"),] = NULL
sum_num_searches_by_yearmon[which(sum_num_searches_by_yearmon$yearmon == "2013-07"),] = NULL
sum_num_searches_by_yearmon = sum_num_searches_by_yearmon[-1,]
View(sum_num_searches_by_yearmon)
plot(sum_num_searches_by_yearmon)
ggplot(data=sum_num_searches_by_yearmon, aes(x=sum_num_searches_by_yearmon$yearmon, y=sum_num_searches_by_yearmon$time_counts)) + geom_bar(stat="identity")
sum_num_searches_by_dow = aggregate(finalized_data_obj[c("time_counts")], by=list(dow=finalized_data_obj$dow), FUN=sum)
View(sum_num_searches_by_dow)
ggplot(data=sum_num_searches_by_dow, aes(x=sum_num_searches_by_dow$dow, y=sum_num_searches_by_dow$time_counts)) +geom_bar(stat="identity")
sum_num_searches_by_dow$dow = factor("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
sum_num_searches_by_dow$dow <- factor(sum_num_searches_by_dow$dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(data=sum_num_searches_by_dow, aes(x=sum_num_searches_by_dow$dow, y=sum_num_searches_by_dow$time_counts)) +geom_bar(stat="identity")
sum_num_searches_by_dow = aggregate(finalized_data_obj[c("time_counts")], by=list(dow=finalized_data_obj$dow), FUN=mean)
sum_num_searches_by_dow$dow <- factor(sum_num_searches_by_dow$dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(data=sum_num_searches_by_dow, aes(x=sum_num_searches_by_dow$dow, y=sum_num_searches_by_dow$time_counts)) +geom_bar(stat="identity")
finalized_data_obj$time_counts
sum_num_searches_by_dow = aggregate(finalized_data_obj[c("time_counts")], by=list(dow=finalized_data_obj$dow), FUN=sum)
sum_num_searches_by_dow$dow <- factor(sum_num_searches_by_dow$dow, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(data=sum_num_searches_by_dow, aes(x=sum_num_searches_by_dow$dow, y=sum_num_searches_by_dow$time_counts)) +geom_bar(stat="identity")
