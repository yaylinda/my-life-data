l = c(1,2,3)
l *4
l = l*4r
l = l*4
l
library(jsonlite)
library(ggplot2)
library(ggmap)
library(geosphere)
library(lubridate)
library(lattice)
data = fromJSON("Location History.json")
data_obj = data$locations
data_obj$timestamp = as.numeric(data_obj$timestampMs)/1000
data_obj$timestampMs = NULL
data_obj$lon = data_obj$longitudeE7/10000000
data_obj$longitudeE7 = NULL
data_obj$lat = data_obj$latitudeE7/10000000
data_obj$latitudeE7 = NULL
data_obj$activitys = NULL
# remove inaccurate data
data_obj = data_obj[which(data_obj$accuracy<=median(data_obj$accuracy)), ]
# data_obj = data_obj[which(data_obj$verticalAccuracy<=50), ]
# caculate distances and dates
shift.vec <- function(vec, shift){
if (length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec) - shift)]) }
else {
c(vec[(abs(shift) + 1):length(vec)], rep(NA, abs(shift)))
}
}
}
data_obj$lat_end <- shift.vec(data_obj$lat, -1)
data_obj$lon_end <- shift.vec(data_obj$lon, -1)
deg2rad = function(deg) {
rad =  as.numeric(deg) * (pi/180)
rad
}
calcDist = function(row) {
R = 6371 # Radius of the earth in km
dlat = deg2rad(as.numeric(row["lat_end"])-as.numeric(row["lat"]))
dlon = deg2rad(as.numeric(row["lon_end"])-as.numeric(row["lon"]))
a = sin(dlat/2) * sin(dlat/2) + cos(deg2rad(row["lat"])) * cos(deg2rad(row["lat_end"])) * sin(dlon/2) * sin(dlon/2)
c = 2 * atan2(as.numeric(sqrt(a)), as.numeric(sqrt(1-a)))
d = R * c # Distance in km
d / 1.6
}
data_obj$dist_to_prev = apply(data_obj, 1, FUN=calcDist)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data = fromJSON("Location History.json")
data_obj = data$locations
data = fromJSON("Location History.json")
data = fromJSON("Location History.json")
data = fromJSON("Location History.json")
library(jsonlite)
data = fromJSON("Location History.json")
data = fromJSON("Location History.json")
library('lattice')
library('ggplot2')
library('reshape2')
library('zoo')
library('lubridate')
setwd("~/Developer/my-life-data/MobileGameSpendings")
ggplot(data=monthlyGamesCumMelt, aes(x=yearmon, y=value)) +
geom_area(aes(color=variable, fill=variable)) +
xlab("Month") +
ylab("Amount Spent ($)") +
ggtitle("Monthly Cumulative Mobile Game Spending")
data = read.csv("purchases.csv")
data$game = as.character(data$game)
data$date = as.Date(data$date, "%m/%d/%y")
data$yearmon = format(data$date, "%Y-%m")
data = data[order(data$date),]
aggregated_game = aggregate(data$price,by=list(data$game),FUN=sum)
colnames(aggregated_game) = c("game", "price")
top_spending_games = aggregated_game[which(aggregated_game$price>50),1]
data$game[!(data$game %in% top_spending_games)] = "Other"
all_months = data.frame(date = seq(as.Date("2014-01-01"), as.Date("2017-10-01"), by = "1 month"))
all_months$yearmon = format(all_months$date, "%Y-%m")
clashClansMonthly = data[data$game == 'Clash of Clans', c(1,3,4,5)]
clashRoyaleMonthly = data[data$game == 'Clash Royale', c(1,3,4,5)]
gordonRamsayMonthly = data[data$game == 'Gordon Ramsay Dash', c(1,3,4,5)]
happyStreetMonthly = data[data$game == 'Happy Street', c(1,3,4,5)]
hearthstoneMonthly = data[data$game == 'Hearthstone', c(1,3,4,5)]
pokemonMonthly = data[data$game == 'Pokemon Go', c(1,3,4,5)]
othersMonthly = data[data$game == 'Other', c(1,3,4,5)]
monthlyAllGames = data.frame(
yearmon = character(),
clashClans = double(),
clashRoyale = double(),
gordonRamsay = double(),
happyStreet = double(),
hearthstone = double(),
pokemon = double(),
others = double()
)
for (i in 1:dim(all_months)[1]) {
yearmon = all_months$yearmon[i]
clashClansPrice = 0
if (yearmon %in% clashClansMonthly$yearmon) {
clashClansPrice = clashClansMonthly[which(clashClansMonthly$yearmon == yearmon), 3]
}
clashRoyalePrice = 0
if (yearmon %in% clashRoyaleMonthly$yearmon) {
clashRoyalePrice = clashRoyaleMonthly[which(clashRoyaleMonthly$yearmon == yearmon), 3]
}
gordonRamsayPrice = 0
if (yearmon %in% gordonRamsayMonthly$yearmon) {
gordonRamsayPrice = gordonRamsayMonthly[which(gordonRamsayMonthly$yearmon == yearmon), 3]
}
happyStreetPrice = 0
if (yearmon %in% happyStreetMonthly$yearmon) {
happyStreetPrice = happyStreetMonthly[which(happyStreetMonthly$yearmon == yearmon), 3]
}
hearthstonePrice = 0
if (yearmon %in% hearthstoneMonthly$yearmon) {
hearthstonePrice = hearthstoneMonthly[which(hearthstoneMonthly$yearmon == yearmon), 3]
}
pokemonPrice = 0
if (yearmon %in% pokemonMonthly$yearmon) {
pokemonPrice = pokemonMonthly[which(pokemonMonthly$yearmon == yearmon), 3]
}
othersPrice = 0
if (yearmon %in% othersMonthly$yearmon) {
othersPrice = othersMonthly[which(othersMonthly$yearmon == yearmon), 3]
}
clashClansPrice = sum(clashClansPrice)
clashRoyalePrice = sum(clashRoyalePrice)
gordonRamsayPrice = sum(gordonRamsayPrice)
happyStreetPrice = sum(happyStreetPrice)
hearthstonePrice = sum(hearthstonePrice)
pokemonPrice = sum(pokemonPrice)
othersPrice = sum(othersPrice)
newRow = data.frame(yearmon, clashClansPrice, clashRoyalePrice, gordonRamsayPrice, happyStreetPrice, hearthstonePrice, pokemonPrice, othersPrice)
names(newRow) = c("yearmon", "clashClans", "clashRoyale", "gordonRamsay", "happyStreet", "hearthstone", "pokemon", "others")
monthlyAllGames = rbind(monthlyAllGames, newRow)
}
monthlyAllGames$clashClansCum = cumsum(monthlyAllGames$clashClans)
monthlyAllGames$clashRoyaleCum = cumsum(monthlyAllGames$clashRoyale)
monthlyAllGames$gordonRamsayCum = cumsum(monthlyAllGames$gordonRamsay)
monthlyAllGames$happyStreetCum = cumsum(monthlyAllGames$happyStreet)
monthlyAllGames$hearthstoneCum = cumsum(monthlyAllGames$hearthstone)
monthlyAllGames$pokemonCum = cumsum(monthlyAllGames$pokemon)
monthlyAllGames$othersCum = cumsum(monthlyAllGames$others)
monthlyGamesCum = monthlyAllGames[,c(1,9:15)]
monthlyGamesCumMelt = melt(monthlyGamesCum, id.vars="yearmon")
ggplot(data=monthlyGamesCumMelt, aes(x=yearmon, y=value)) +
geom_area(aes(color=variable, fill=variable)) +
xlab("Month") +
ylab("Amount Spent ($)") +
ggtitle("Monthly Cumulative Mobile Game Spending")
