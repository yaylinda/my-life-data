l = c(1,2,3)
l *4
l = l*4r
l = l*4
l
library(jsonlite)
library(ggplot2)
library(ggmap)
library(geosphere)
library(lubridate)
library(lattice)
data = fromJSON("Location History.json")
data_obj = data$locations
data_obj$timestamp = as.numeric(data_obj$timestampMs)/1000
data_obj$timestampMs = NULL
data_obj$lon = data_obj$longitudeE7/10000000
data_obj$longitudeE7 = NULL
data_obj$lat = data_obj$latitudeE7/10000000
data_obj$latitudeE7 = NULL
data_obj$activitys = NULL
# remove inaccurate data
data_obj = data_obj[which(data_obj$accuracy<=median(data_obj$accuracy)), ]
# data_obj = data_obj[which(data_obj$verticalAccuracy<=50), ]
# caculate distances and dates
shift.vec <- function(vec, shift){
if (length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec) - shift)]) }
else {
c(vec[(abs(shift) + 1):length(vec)], rep(NA, abs(shift)))
}
}
}
data_obj$lat_end <- shift.vec(data_obj$lat, -1)
data_obj$lon_end <- shift.vec(data_obj$lon, -1)
deg2rad = function(deg) {
rad =  as.numeric(deg) * (pi/180)
rad
}
calcDist = function(row) {
R = 6371 # Radius of the earth in km
dlat = deg2rad(as.numeric(row["lat_end"])-as.numeric(row["lat"]))
dlon = deg2rad(as.numeric(row["lon_end"])-as.numeric(row["lon"]))
a = sin(dlat/2) * sin(dlat/2) + cos(deg2rad(row["lat"])) * cos(deg2rad(row["lat_end"])) * sin(dlon/2) * sin(dlon/2)
c = 2 * atan2(as.numeric(sqrt(a)), as.numeric(sqrt(1-a)))
d = R * c # Distance in km
d / 1.6
}
data_obj$dist_to_prev = apply(data_obj, 1, FUN=calcDist)
data_obj$date = as.Date(as.POSIXct(data_obj$timestamp, origin="1970-01-01"))
data_obj$yearmon = paste(year(data_obj$date), sprintf("%02d", month(data_obj$date)), sep="-")
data = fromJSON("Location History.json")
data_obj = data$locations
data = fromJSON("Location History.json")
data = fromJSON("Location History.json")
data = fromJSON("Location History.json")
library(jsonlite)
data = fromJSON("Location History.json")
data = fromJSON("Location History.json")
setwd("~/Developer/my-life-data/2018")
{
data = read.csv('data.csv')
data$date = as.Date(data$date, format = "%m/%d/%y")
data$week = week(data$date)
data$month = format(data$date,"%B")
data$month = factor(data$month, list("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
data$yearmonth = as.yearmon(data$date)
data$yearmonthf = factor(data$yearmonth)
data$day_of_week = factor(data$day_of_week, rev(list("Saturday", "Friday", "Thursday", "Wednesday", "Tuesday", "Monday", "Sunday")))
data[data==0] = "No"
data[data==1] = "Yes"
# calculate week of month, where sunday is new week
weekofmonth = rep(0, length(data$date))
weekNum = 1
currentMonth = 1
for (i in (1:length(data$date))) {
date = data$date[i]
if (weekdays(date) == "Sunday") {
weekNum = weekNum + 1
}
if (month(date) > currentMonth) {
currentMonth = currentMonth + 1
weekNum = 1
}
weekofmonth[i] = weekNum
}
data$monthweek = weekofmonth
data$monthweek = factor(data$monthweek, list(6, 5, 4, 3, 2, 1))
}
library(ggplot2)
library(plyr)
library(scales)
library(zoo)
library(lubridate)
library(reshape2)
{
data = read.csv('data.csv')
data$date = as.Date(data$date, format = "%m/%d/%y")
data$week = week(data$date)
data$month = format(data$date,"%B")
data$month = factor(data$month, list("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
data$yearmonth = as.yearmon(data$date)
data$yearmonthf = factor(data$yearmonth)
data$day_of_week = factor(data$day_of_week, rev(list("Saturday", "Friday", "Thursday", "Wednesday", "Tuesday", "Monday", "Sunday")))
data[data==0] = "No"
data[data==1] = "Yes"
# calculate week of month, where sunday is new week
weekofmonth = rep(0, length(data$date))
weekNum = 1
currentMonth = 1
for (i in (1:length(data$date))) {
date = data$date[i]
if (weekdays(date) == "Sunday") {
weekNum = weekNum + 1
}
if (month(date) > currentMonth) {
currentMonth = currentMonth + 1
weekNum = 1
}
weekofmonth[i] = weekNum
}
data$monthweek = weekofmonth
data$monthweek = factor(data$monthweek, list(6, 5, 4, 3, 2, 1))
}
data$abandoned_weekday == 'No'
sum(data$abandoned_weekday == 'No')
count(data$abandoned_weekday == 'No')
count(data$abandoned_weekday)
data$abandoned_weekday
ggplot(data, aes(x = data$day_of_week, fill = off)) +
geom_bar(width = 0.25) +
scale_fill_manual(values = c('green', 'red'))
ggplot(data, aes(x = data$day_of_week, fill = abandoned_weekday)) +
geom_bar(width = 0.25) +
scale_fill_manual(values = c('green', 'red'))
